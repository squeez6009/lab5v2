#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "lib.h"

//INSERT FRONT

struct Node* insert_front(struct Node* root, struct Data data) {
	struct Node *new_node = malloc(sizeof(struct Node));
	
	memcpy ( &((*new_node).data), &data, sizeof(struct Data));
	new_node->next = NULL;
	
	if (root == NULL){
		return new_node;
	}
	
<<<<<<< HEAD
	new_node->next = root;
=======
	
  new_node->next = root;
>>>>>>> c8ada8a23bcb358dc5585ae07f292ef277bbb7fa
	
	return new_node;
}

//REMOVE FRONT

struct Node* remove_front(struct Node* root) {
  struct Node* temp = root;
<<<<<<< HEAD
	struct Node* del;	
	del=temp->next;
  temp->next = (temp->next)->next;
	free (del);
=======
	
	root=temp->next;
	
	free (temp);
>>>>>>> c8ada8a23bcb358dc5585ae07f292ef277bbb7fa
	return root;
}



//INSERT END

struct Node* insert_end(struct Node* root, struct Data data) {
	struct Node *new_node = malloc(sizeof(struct Node));
	
	memcpy ( &((*new_node).data), &data, sizeof(struct Data));
	new_node->next = NULL;
	
	if (root == NULL){
		return new_node;
	}
	
	struct Node* temp = root;
	while (temp->next != NULL){	
		temp = temp->next;
	}
	temp->next = new_node;
	return root;
}

//REMOVE END

struct Node* remove_end(struct Node* root) {
		
	struct Node* temp = root;
	struct Node* prev;
	
	
	while (temp->next != NULL){	
		prev=temp;
		temp = temp->next;		
	}
	free (prev->next);
	prev->next = NULL;	
	
	return root;
	
}

//INSERT MIDDLE  
//help :  https://www.youtube.com/watch?v=tta6BIiIIFI

struct Node* insert_middle(struct Node* root, struct Data data) {
	struct Node *new_node = malloc(sizeof(struct Node));
	
	int middle = 0;
	int count = 0;
	int list_size;
	
	
	memcpy ( &((*new_node).data), &data, sizeof(struct Data));
	new_node->next = NULL;
	
	if (root == NULL){
		return new_node;
	}		
	struct Node* temp = root;	
	
	list_size = size(temp);
	middle = list_size / 2;	
	
	while (temp->next != NULL){
	  count ++;
	  
  if (middle == count)	 
	  break;
	  
		temp = temp->next;
		
	}
	if (temp == NULL){
	  printf("/nERROR: Node was NULL");
	  }
	new_node->next = temp->next;
	temp->next = new_node;
	
	return root;
	
}
//REMOVE MIDDLE  


struct Node* remove_middle(struct Node* root) {
	
	
	int middle = 0;
	int count = 0;
	int list_size;
	
		
	struct Node* temp = root;	
	struct Node* prev;
	
	list_size = size(temp);
	middle = list_size / 2;	
	
	while (temp->next != NULL){
    count ++;
	  
  if (middle == count)	 
    break;
	  
		temp = temp->next;
		prev=temp;
		
	  }
  if (temp == NULL){
    printf("/nERROR: Node was NULL");
	  }
	  prev=temp->next;
	  *temp = *prev;
	  free (prev);
	
	
	return root;
	
}


//TRAVERSE LIST

//LOOK UP BY INDEX
struct Node* look_up_by_index(struct Node* root) {
  struct Node* temp = root;	
  
  int i;
  int list_size = size(temp);
  //int count = 1;
  int index;
  printf("\nWhich index do you want to look up? ");
  scanf(" %d", &index);
  if(index <= 0 || index > list_size){
        printf("ERROR: Node does not exist!\n");
       return -1;
       }
  //while (temp != NULL)
    //{
     //  if (count == choice)
     //     break;
          
      // count++;
  for (i=1; i<=index; i++){
       temp = temp->next;
       
    }
    return temp;


}


//INSERT FRONT 2

struct Node* insert_front_2(struct Node* root, char* name, int age) {
	struct Node *new_node = malloc(sizeof(struct Node));
	
	memcpy ( name, &((*new_node).data.name), sizeof(char)*NAME_LENGTH);
	new_node->data.age = age;
	
	new_node->next = NULL;
	
	if (root == NULL){
		return new_node;
	}
	
	
	new_node->next = root;
	
	return new_node;

}

// GET DATA

struct Data* get_data() {
	struct Data *data = malloc(sizeof(struct Data));
	printf("Enter name: ");
	scanf("%s", (data->name));
	printf("Age: ");
	scanf("%d", &(data->age));
	return data;
}


// LIST SIZE (used for counting length of linked list and for finding middle)

int size(struct Node* root){
  
  //struct Node* temp = root;
  int count = 0;
  
	while (root != NULL){
	  count ++;
		root = root->next;    
}

return count;

}


// PRINT DATA

void print_data(struct Data* data){
	if(data==NULL){
		printf("ERROR: Data was NULL\n");
	}
	printf("{%s, ", data->name);
	printf("%d} \n", data->age);
}

void print_node(struct Node* node){
	if(node==NULL){
		printf("ERROR: Node was NULL\n");
	}
	printf("Node: ");
	print_data(&(node->data));
	printf("\n");
}

void print_linked_list(struct Node* root) {
	if(root == NULL) {
		printf("ERROR: Root was NULL\n");
	}
	struct Node *temp = root;
	while(temp != NULL) {
		print_node(temp);
		temp = temp->next;
	}
}
